//- TODO: consider redoing this as a modal that displays impact options only when needed; active impacts can then be displayed

//-
  opts: {
    type: '<any html btn type>',
    text: 'example',
    attribute: 'example'

    // Optional
    classes: 'example-class'
    action: 'static' or 'toggle' (default)
  }

mixin actionBtn(action, dataObj={}, classes=[])
  //- TODO: extract this as a function to generate appropriate data objects
  -
    if (dataObj["i18n-title"] && !dataObj["i18n-aria-label"]) {
      dataObj["i18n-aria-label"] = dataObj["i18n-title"]
    }
    data = _.mapKeys(dataObj, (value, key) => {
      return `data-${key}`
    });
    // automatically generates En placeholder text
    for (const key in data) {
      if (key.match(/^i18n-/)) {
        data[key.replace(/^i18n-/, "")] = translation[data[key]];
      }
    }
  button(
  name=`act_${action}`
  type="action"
  class=classes
  )&attributes(data)

mixin setAttrBtn(attribute, data, classes=[])
  +actionBtn(`set-${attribute}`, data, classes)
    block

mixin attrToggle(attribute, checkboxId, label, classes=[], checked=false)
  input(hidden type="checkbox" name=`attr_${attribute}` id=checkboxId checked=checked class=["toggle-control", ...classes])
  label(for=checkboxId class=["toggle-btn", ...classes])
    if translation[label]
      +i18n(label)
    else
      !=label


mixin btn(opts)
  - action = opts.action ? opts.action : 'toggle'
  if opts.classes
    label(class=[`${action}-btn`, `${opts.classes}`])
      if opts.pure_attr
        input(hidden type=opts.type name=`attr_${opts.attribute}` checked=opts.checked||false)
      else
        input(hidden type=opts.type name=`attr_${opts.attribute}_button` checked=opts.checked||false)
      +i18n(opts.translationId)
  else
    label(class=[`${action}-btn`])
      input(hidden type=opts.type name=`attr_${opts.attribute}_button` checked=opts.checked||false)
      +i18n(opts.translationId)