mixin ability(asset, ability, number, name)
  - var abilityId = `${name}_${number}`
  .flex-container
    if ability.Enabled
      input.asset-ability(
        type='checkbox'
        name=`attr_ability_checkbox_${abilityId}`
        checked
      )
    else
      input.asset-ability(
        type='checkbox'
        name=`attr_assetcheckbox_${asset.abilityId}${number}`
      )
    - var translationAbility = `asset-${name}-ability-${number}`
    - var assetBodyPlaceholder=translation[translationAbility]
    .asset-ability(data-i18n=translationAbility)=!{assetBodyPlaceholder}
      if ability.Input
        each field in ability.Input
          - var translationAbilityField = `asset-${name}-ability-${number}-textinput-${field.toLowerCase().replace(/\s/g, '-')}`
          .asset-ability-write-in(data-i18n=translationAbilityField)=translation[translationAbilityField]
          input.border-bottom.no-border(type='text' name=`attr_ability_field${field}` value='')

mixin description(asset, key)
  .asset-description
    - var translationDesc = `asset-${key}-description`
    .asset-description-text(data-i18n=translationDesc)=translation[translationDesc]

mixin field(field, assetName)
  .write-in-container
    .asset-write-in.asset-name(
      data-i18n=`asset-${assetName}-textinput-${field.toLowerCase()}`
    )=translation[`asset-${assetName}-textinput-${field.toLowerCase()}`]
    input.border-bottom.no-border(type='text' name=`attr_field-${field}` value='')

mixin track(track, assetName)
  .asset-track-wrapper
    - var currentTrack = 0
    while currentTrack <= track.Value
      .asset-track-box
        if currentTrack == 0
          .asset-track-box-display=0
        else
          .asset-track-box-display=`+ ${currentTrack}`
        input(type='radio' name=`attr_assettrack_${assetName}` value=`${currentTrack}`)
        - currentTrack++

mixin assetTemplate(asset, options)
  - var name = asset.Name.toLowerCase().replace(/\s/g, '-')
  - var category = asset.Category.toLowerCase().replace(/\s/g, '-')
  if options.visiblityToggle === true
    input(class=`${options.classes} ${name}` type='checkbox' name=`attr_${name}`)
  div(class=`${options.classes} ${name} category-${category}`)
    .asset-content-header
      .asset-details
        .category=asset.Category
        span.asset-name=asset.Name
      .background-svg
    if asset.Description
      +description(asset, name)
    if asset.Input
      each field in asset.Input
        +field(field, name)
    .flex-wrapper
      each ability, index in asset.Abilities
        - var abilityNumber = index + 1
        +ability(asset, ability, abilityNumber, name)
    if asset['Condition Meter'] && options.standalone === false
      +track(asset['Condition Meter'], name)

mixin genericBuilder(assetsArray, listId)
  //- Asset Datalist
  input.asset-options-header(type='text' list=listId name='attr_asset' placeholder=translation["type-asset-name"])
  datalist(id=listId)
    each asset in assetsArray
      - var name = asset.Name.toLowerCase().replace(/\s/g, '-')
      //- - console.log(`input[type=checkbox].${name}:checked ~ div.${name},`)
      option(data-i18n=`asset-${name}-name` value=name)=translation[`asset-${name}-name`]
    option(data-i18n=`asset-custom-name` value='custom')=translation[`asset-custom-name`]

  //- Asset Content
  each asset in assetsArray
    +assetTemplate(asset, { classes: 'hide-element', visiblityToggle: true, standalone: false })
