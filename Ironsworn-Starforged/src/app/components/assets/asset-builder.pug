include ./../resources/mixins/resourcemeter
include ./../../common/pug/pager
include ./../rolls/statRollBtn

-
  function trimId(inputId) {
    let output = inputId.replace(/^asset-/, "");
    //- console.log(`"${output},"`);
    return output;
  }

//- repeating assets use unprefixed attributes, e.g.: "archer-meter-ammo"
//- a worker syncs this with the PC's prefixed attribute, "asset-archer-meter-ammo"

mixin assetAbility(ability)
  section.asset-ability
    +attrToggleCheck(trimId(ability.id), null, ability.Enabled)
    +i18n(ability.id)
    if ability.Input
      each input, index in ability.Input
        - inputId = `${ability.id}-textinput-${_.kebabCase(input)}`
        label.asset-textinput
          +i18n(inputId)
          input(type='text' name=`attr_${trimId(inputId)}` value='')
    if ability['Counter'] && standalone === false
      +assetCounter(ability.Counter)

mixin assetDescription(asset)
  - translationDesc = `${asset.id}-description`
  section.asset-description.asset-header-field
    +i18n(translationDesc)

mixin assetInputBox(inputBox, assetId)
  //- - id = `${assetId}-inputBox-${_.kebabCase(inputBox)}`
  - id = `${assetId}-textinput-${_.kebabCase(inputBox)}`
  label.asset-textinput.asset-header-field
    +i18n(id)
    input(type='text' name=`attr_${trimId(id)}` value='')
    //- old `attr_field-${field}`

mixin assetMeterBar(asset)
  - let assetName = asset.Name
  - let meter = asset["Condition Meter"]
  - let meterLabel;
  - let btnLabel;
  if meter.Name == "Health"
    - btnLabel = "roll-plus-companion-health"
    - meterLabel = btnLabel.replace("roll-plus-", "resource")
  else if meter.Name == "Integrity"
    - btnLabel = `roll-plus-${asset["asset-type"].replace("asset-type", "")}-integrity`
    - meterLabel = btnLabel.replace("roll-plus-", "resource")
  else
    - btnLabel = `roll-plus-${_.kebabCase(meter.Name)}`
    - meterLabel = meter.id
  +resourceMeterBar(trimId(meter.id), meterLabel, meter.Max, meter.Min||0, meter["Starts At"]||meter["Starts at"]||meter.Max)
    +statRollBtn(meter.id, false, btnLabel, false, ["icon-btn"])

mixin assetCard(asset, standalone = false, classes=[])
  //- TODO: migrate to asset attr matching id of asset for clarity/long-term maintainability
  - category = _.kebabCase(asset.Category)
  article(class=["asset-card", asset.id, asset["asset-type"], ...classes])
    +assetHeader(asset)
      if asset.Input
        each inputBox in asset.Input
          +assetInputBox(inputBox, asset.id)
      if asset.Select
        +assetSelect(asset)
      if asset.Description
        +assetDescription(asset)
    section.asset-abilities
      each ability in asset.Abilities
        +assetAbility(ability)
    if asset['Condition Meter'] && standalone === false
      +assetMeterBar(asset)
    if asset['Counter'] && standalone === false
      +assetCounter(asset)

mixin assetCounter(asset)
  - let id = _.kebabCase(`${asset.id}-counter-${asset.Counter.Name}`)  //- TODO: generate working translations via dataforged
  input(
    class=["asset-counter"]
    type="number"
    value=0
    min=0
    max=asset.Counter.Max
    title=asset.Counter.Name
    name=`attr_${trimId(id)}`
    )
    //- name="attr_"+id

mixin assetSelect(asset)
  - let id = _.kebabCase(`${asset.id}-select-${asset.Select.Name}`)
  label(class=["asset-select", "asset-header-field"])
    //- TODO proper translation from dataforged
    span!=asset.Select.Name
    select(
      name=`attr_${trimId(id)}`
      )
      each item in asset.Select.Options
        - let optionId = _.kebabCase(`${asset.Select.Type}-${item}`)
        option(value=item.toLowerCase())!=translation[optionId]

mixin assetHeader(asset)
  section.asset-header
    span.asset-type=asset.Category
    h3.asset-name=asset.Name
    block


mixin genericAssetBuilder(assetsArray, listId)
  input.asset-picker(type="hidden" name="attr_asset")
  //- Asset Datalist
  input.asset-picker(type='text' list=listId name='attr_asset' placeholder=translation["type-asset-name"])
  datalist(id=listId)
    each asset in assetsArray
      option(class=asset.id value=asset.id data-i18n=`${asset.id}-name`)!=translation[`${asset.id}-name`]
    option(class="asset-custom" value='custom' data-i18n="asset-custom-name")!=translation["asset-custom-name"]

  //- Asset Content
  each asset in assetsArray
    +assetCard(asset, false)
